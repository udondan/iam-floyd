---
name: Release

concurrency: test

on:
  push:
    branches:
      - main
    paths:
      - VERSION
  workflow_dispatch:

jobs:
  finalize:
    name: Finalize
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Update version references
        run: make update-version-refs

      - name: Re-format Python documentation examples
        run: |
          pip install autopep8
          make python-examples-adjust-indention

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git diff --exit-code || git commit -m "Finalize v${{ steps.get_version.outputs.VERSION }}" -a

      - name: Push changes
        run: >
          [[ "${{ github.ref }}" == refs/tags/* ]] ||
          git push "https://${{ github.actor }}:${{ github.token }}@github.com/${{ github.repository }}.git" "${GITHUB_REF##*/}"

      - name: Get current SHA
        run: git rev-parse HEAD > /tmp/sha

      - name: Store SHA as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sha
          path: /tmp/sha

  build-standalone:
    name: "STANDALONE: Build package"
    needs: finalize
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build source
        uses: udondan/jsii-publish@v0.14.0
        with:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          BUILD_SOURCE: true

      - name: Build packages
        uses: udondan/jsii-publish@v0.14.0
        with:
          BUILD_PACKAGES: true

      - name: Store packages as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: dist/**/*

  build-cdk:
    name: "CDK: Build package"
    needs: finalize
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build CDK variant
        run: make install cdk

      - name: Build source
        uses: udondan/jsii-publish@v0.14.0
        with:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          BUILD_SOURCE: true

      - name: Build packages
        uses: udondan/jsii-publish@v0.14.0
        with:
          BUILD_PACKAGES: true

      - name: Store packages as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cdk-packages
          path: dist/**/*

  test-standalone-node:
    name: "STANDALONE: Test Node.js package"
    needs: build-standalone
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist

      - name: Install package
        run: |
          sed -i "s/iam-floyd/iam-dummy/g" package*
          sed -i "s/import.*'..\/..\/lib';/import * as statement from 'iam-floyd';/g" examples/*/*.ts
          npm i dist/js/iam-floyd@*.jsii.tgz
          sudo npm i -g typescript

      - name: Test npm package
        run: make test-typescript
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test-standalone-python:
    name: "STANDALONE: Test Python package"
    needs: build-standalone
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist

      - name: Test Python package
        run: make test-python
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test-cdk-node:
    name: "CDK: Test Node.js package"
    needs: build-cdk
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: cdk-packages
          path: dist

      - name: Install package
        run: |
          sed -i "s/iam-floyd/iam-dummy/g" package*
          sed -i "s/import.*'..\/..\/lib';/import * as statement from 'cdk-iam-floyd';/g" examples/*/*.ts
          npm i dist/js/cdk-iam-floyd@*.jsii.tgz
          sudo npm i -g typescript

      - name: Test npm package
        run: |
          make test-typescript-cdk
          make cdk-test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test-cdk-python:
    name: "CDK: Test Python package"
    needs: build-cdk
    runs-on: ubuntu-latest
    container:
      image: jsii/superchain:1-buster-slim
      options: --group-add sudo
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: cdk-packages
          path: dist

      - name: Test Python package
        run: make test-python-cdk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  release:
    name: Release
    needs:
      - test-standalone-node
      - test-standalone-python
      - test-cdk-node
      - test-cdk-python
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest SHA
        uses: actions/download-artifact@v3
        with:
          name: sha
          path: /tmp/sha

      - name: Store latest SHA as output
        id: get_sha
        run: echo "SHA=$(cat /tmp/sha/sha)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ steps.get_sha.outputs.SHA }}

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --local user.email "${{ secrets.RELEASE_MAIL }}"
          git config --local user.name "udondan"
          git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Creates tag v${{ steps.get_version.outputs.VERSION }}"
          git push "https://udondan:${{ secrets.OVERRIDE_TOKEN }}@github.com/${{ github.repository }}.git" --tags
          touch CHANGELOG/v${{ steps.get_version.outputs.VERSION }}.md

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.OVERRIDE_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: v${{ steps.get_version.outputs.VERSION }}
          body_path: CHANGELOG/v${{ steps.get_version.outputs.VERSION }}.md

  publish-standalone-npm:
    name: "STANDALONE: Publish to npm"
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist

      - name: Publish to npm
        uses: udondan/jsii-publish@v0.14.0
        with:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-standalone-pypi:
    name: "STANDALONE: Publish to PyPI"
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist

      - name: Publish to PyPI
        uses: udondan/jsii-publish@v0.14.0
        with:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  publish-cdk-npm:
    name: "CDK: Publish to npm"
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: cdk-packages
          path: dist

      - name: Publish to npm
        uses: udondan/jsii-publish@v0.14.0
        with:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-cdk-pypi:
    name: "CDK: Publish to PyPI"
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: cdk-packages
          path: dist

      - name: Publish to PyPI
        uses: udondan/jsii-publish@v0.14.0
        with:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
